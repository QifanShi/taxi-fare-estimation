## also only select those records with customer
query <- mongo.bson.from.list(list("date"="2009-09-08")
fields <- mongo.bson.buffer.create()
mongo.bson.buffer.append(fields, "_id", 0L)
mongo.bson.buffer.append(fields, "taxi_no", 1L)
mongo.bson.buffer.append(fields, "date", 1L)
mongo.bson.buffer.append(fields, "speed", 1L)
mongo.bson.buffer.append(fields, "time", 1L)
mongo.bson.buffer.append(fields, "lon", 1L)
mongo.bson.buffer.append(fields, "lat", 1L)
mongo.bson.buffer.append(fields, "occupy", 1L)
mongo.bson.buffer.append(fields, "unknown", 1L)
fields <- mongo.bson.from.buffer(fields)
cursor <- mongo.find(mongo, namespace, query=query, fields=fields)
## Define a master data frame to store results
taxi.data <- data.frame(stringsAsFactors=FALSE)
## load libraries
library(rmongodb)
library(plyr)
## login tokens
host <- "heinz-tjle.heinz.cmu.edu"
username <- "student"
password <- "helloWorld"
db <- "admin"
mongo <- mongo.create(host = host, db = db, username = username, password = password)
mongo.is.connected(mongo)
## get a list of all dataset under db "admin"
mongo.get.database.collections(mongo, db="admin")
collection <- "taxi" ## taxi trajectory
namespace <- paste(db, collection, sep=".")
mongo.count(mongo, namespace)
(sample <- mongo.find.one(mongo, namespace))
## create a variable "namespace", the value is "admin.taxi"
collection <- "taxi"
namespace <- paste(db, collection, sep=".")
## get dataset size
mongo.count(mongo, namespace);
## get a random sample
sample <- mongo.find.one(mongo, namespace)
## view sample
(sample)
## create query with a certain date of 2009-09-8
## also only select those records with customer
query <- mongo.bson.from.list(list("date"="2009-09-08"))
fields <- mongo.bson.buffer.create()
mongo.bson.buffer.append(fields, "_id", 0L)
mongo.bson.buffer.append(fields, "taxi_no", 1L)
mongo.bson.buffer.append(fields, "date", 1L)
mongo.bson.buffer.append(fields, "speed", 1L)
mongo.bson.buffer.append(fields, "time", 1L)
mongo.bson.buffer.append(fields, "lon", 1L)
mongo.bson.buffer.append(fields, "lat", 1L)
mongo.bson.buffer.append(fields, "occupy", 1L)
mongo.bson.buffer.append(fields, "unknown", 1L)
fields <- mongo.bson.from.buffer(fields)
cursor <- mongo.find(mongo, namespace, query=query, fields=fields)
## Define a master data frame to store results
taxi.data <- data.frame(stringsAsFactors=FALSE)
while(mongo.cursor.next(cursor)) {
## Iterate and grab the next record
value <- mongo.cursor.value(cursor);
taxi <- mongo.bson.to.list(value);
## Make it a data frame
taxi.df <- as.data.frame(t(unlist(taxi)), stringsAsFactors=FALSE);
## Bind to the master data frame
taxi.data <- rbind.fill(taxi.data, taxi.df);
}
## Release the resources attached to cursor on both client and server
done <- mongo.cursor.destroy(cursor)
write.csv(taxi.data, file = "C:/Users/Qifan/Documents/GitHub/taxi-fare-estimation/Data/taxi-gps-2009-09-08.csv")
source("./GitHub/taxi-fare-estimation/R Script/Util/fivethirtyeight_theme.R")
shenzhen.od <- shenzhen + geom_segment(data=od.data, aes(x=or_lon, y=or_lat,
xend=dest_lon, yend=dest_lat,
group=group),
alpha=0.8, col="red") + quiet + coord_equal() +
fivethirtyeight_theme()
print(shenzhen.od)
ggsave(filename="./GitHub/taxi-fare-estimation/Image/20090908.png", scale = 3, dpi = 400)
rm(list = ls())
library(plyr)
library(ggplot2)
library(maptools)
library(rgdal)
library(rgeos)
# library(rmongodb)
source("./GitHub/taxi-fare-estimation/R Script/Util/fivethirtyeight_theme.R")
## Load all taxi GPS traces on Sept. 11, 2009 when occupied
taxi.data <- read.csv(file="./GitHub/taxi-fare-estimation/Data/taxi-gps-2009-09-08.csv", header=TRUE)
# ## Login credentials
# host <- "heinz-tjle.heinz.cmu.edu"
# username <- "student"
# password <- "helloWorld"
# db <- "admin"
#
# ## Connect to MongoDB remote server
# mongo <- mongo.create(host = host, db = db, username = username, password = password)
# ## Check if we are successfully connected
# mongo.is.connected(mongo)
#
# ## The database we're working with is 'admin' and the collection is 'taxi'
# collection <- "taxi"
# namespace <- paste(db, collection, sep=".")
#
# ## Retrieve all ride records on Sept. 11, 2009
# query <- mongo.bson.from.list(list('date'='2009-09-11', 'occupy'=1))
# ## Define the fields to be returned
# fields <- mongo.bson.buffer.create()
# ## '1L' means we want to turn this field on, '0L' to turn it off
# mongo.bson.buffer.append(fields, "_id", 0L)
# mongo.bson.buffer.append(fields, "taxi_no", 1L)
# mongo.bson.buffer.append(fields, "date", 1L)
# mongo.bson.buffer.append(fields, "time", 1L)
# mongo.bson.buffer.append(fields, "lon", 1L)
# mongo.bson.buffer.append(fields, "lat", 1L)
# ## Make an object from the buffer
# fields <- mongo.bson.from.buffer(fields)
#
# ## Create the query cursor
# cursor <- mongo.find(mongo, namespace, query=query, fields=fields)
# ## Define a master data frame to store results
# taxi.data <- data.frame(stringsAsFactors=FALSE)
# ## Iterate over the cursor
# while(mongo.cursor.next(cursor)) {
#   ## Iterate and grab the next record
#   value <- mongo.cursor.value(cursor)
#   taxi.record <- mongo.bson.to.list(value)
#   ## Make it a data frame
#   taxi.df <- as.data.frame(t(unlist(taxi.record)), stringsAsFactors=FALSE)
#   ## Bind to the master data frame
#   taxi.data <- rbind.fill(taxi.data, taxi.df)
# }
#
# ## Release the resources attached to cursor on both client and server
# mongo.cursor.destroy(cursor)
# ## Close the connection
# mongo.disconnect(mongo)
# mongo.destroy(mongo)
## Compute the duration between each timestamp
duration <- vector()
trip_indicator <- vector()
threshold <- 15*60 # seconds
## Create a progress bar
progress.bar <- create_progress_bar("text")
progress.bar$init(nrow(taxi.data)-1)
for(i in 1:(nrow(taxi.data)-1)) {
this_taxi_no <- taxi.data$taxi_no[i]
next_taxi_no <- taxi.data$taxi_no[i+1]
if(this_taxi_no == next_taxi_no) {
this_timestamp <- toString(taxi.data$time[i])
this_timestamp <- strsplit(this_timestamp, ":")[[1]]
this_second <- as.numeric(this_timestamp[1])*3600 + as.numeric(this_timestamp[2])*60 + as.numeric(this_timestamp[3])
next_timestamp <- toString(taxi.data$time[i+1])
next_timestamp <- strsplit(next_timestamp, ":")[[1]]
next_second <- as.numeric(next_timestamp[1])*3600 + as.numeric(next_timestamp[2])*60 + as.numeric(next_timestamp[3])
duration[i] <- next_second - this_second
if(i == 1) {
trip_indicator[i] <- "start"
} else {
if(trip_indicator[i-1] == "end" || trip_indicator[i-1] == "error") {
trip_indicator[i] <- "start"
} else {
if(duration[i] >= threshold) {
trip_indicator[i] <- "end"
} else {
trip_indicator[i] <- "going"
}
}
}
} else {
duration[i] <- NA
if(trip_indicator[i-1] == "end") {
trip_indicator[i] <- "error"
} else {
trip_indicator[i] <- "end"
}
}
progress.bar$step()
}
duration[nrow(taxi.data)] <- NA
trip_indicator[nrow(taxi.data)] <- "end"
taxi.data$duration <- duration
taxi.data$indicator <- trip_indicator
## Create a progress bar
progress.bar <- create_progress_bar("text")
progress.bar$init(nrow(taxi.data))
or.data <- data.frame() # data frame for the origins
dest.data <- data.frame() # data frame for the destinations
for(i in 1:nrow(taxi.data)) {
indicator <- taxi.data$indicator[i]
if(indicator == "start") {
or_lon <- taxi.data$lon[i]
or_lat <- taxi.data$lat[i]
or_data <- data.frame(or_lon = or_lon, or_lat = or_lat)
or.data <- rbind(or.data, or_data)
} else if(indicator == "end") {
dest_lon <- taxi.data$lon[i]
dest_lat <- taxi.data$lat[i]
dest_data <- data.frame(dest_lon = dest_lon, dest_lat = dest_lat)
dest.data <- rbind(dest.data, dest_data)
} else {
## Do nothing
}
progress.bar$step()
}
## Combine the OD pairs
od.data <- cbind(or.data, dest.data)
## Add artificial group to the OD pairs in order to be compatitable with the shapefiles
od.data$group <- seq(1:nrow(od.data))
## Remove the axes in the resulting plot
x_quiet <- scale_x_continuous("", breaks=NULL)
y_quiet <- scale_y_continuous("", breaks=NULL)
quiet <- list(x_quiet, y_quiet)
## Read the shapefiles
## The spatial object wouldn't have a coordinate system assigned to it.
## We can check it by proj4string(sz_bou). We thus need to assign a CRS
## (coordinate reference system) to the object before we can plot it.
## Here we use the WGS84 standard (the World Geodetic System proposed in 1984)
sz_bou <- readOGR(dsn="./GitHub/taxi-fare-estimation/Shp", layer="sz_bou")
proj4string(sz_bou) <- CRS("+init=epsg:4326")
sz_road <- readOGR(dsn="./GitHub/taxi-fare-estimation/Shp", layer="sz_road")
proj4string(sz_road) <- CRS("+init=epsg:4326")
sz_veg <- readOGR(dsn="./GitHub/taxi-fare-estimation/Shp", layer="sz_veg")
proj4string(sz_veg) <- CRS("+init=epsg:4326")
sz_wat <- readOGR(dsn="./GitHub/taxi-fare-estimation/Shp", layer="sz_wat")
proj4string(sz_wat) <- CRS("+init=epsg:4326")
## Convert shapefiles into data frames so that they can be plotted using ggplot
sz_bou.data <- fortify(sz_bou)
sz_road.data <- fortify(sz_road) ## this will take a while
sz_veg.data <- fortify(sz_veg)
sz_wat.data <- fortify(sz_wat)
## Plot the shapfiles using ggplot
shenzhen <- ggplot(data=sz_bou.data, aes(x=long, y=lat,
group=group)) + geom_polygon(fill="lightblue") +
ggtitle("Map of Shenzhen + All Taxi OD Pairs on 09/08/2009")
shenzhen <- shenzhen + geom_polygon(data=sz_wat.data,
aes(x=long, y=lat, group=group),
fill="blue", alpha=0.75)
shenzhen <- shenzhen + geom_polygon(data=sz_veg.data,
aes(x=long, y=lat, group=group),
fill="darkgreen", alpha=0.75)
shenzhen <- shenzhen + geom_polygon(data=sz_road.data,
aes(x=long, y=lat, group=group),
color="darkgrey", fill=NA)
## Add OD pairs to the shapefiles
shenzhen.od <- shenzhen + geom_segment(data=od.data, aes(x=or_lon, y=or_lat,
xend=dest_lon, yend=dest_lat,
group=group),
alpha=0.8, col="red") + quiet + coord_equal() +
fivethirtyeight_theme()
print(shenzhen.od)
ggsave(filename="./GitHub/taxi-fare-estimation/Image/20090908.png", scale = 3, dpi = 400)
setwd("/Users/shiqifanshiqifan/Documents/CMU/S15/MIB/taxi-fare-estimation/")
getwd()
setwd("/Users/shiqifanshiqifan/Documents/CMU/S15/MIB/taxi-fare-estimation/")
exp(1)
setwd("C:/Users/Qifan/Documents/GitHub/taxi-fare-estimation/")
rm(list = ls())
library(plyr)
library(ggplot2)
library(maptools)
library(rgdal)
library(rgeos)
taxi.data <- read.csv(file="./data/filtered-taxiTraj-2009-09-11.csv", header=TRUE)
## select only data bwtween 1 - 2
taxi.data <- taxi.data[taxi.data$hour == 1,]
library(igraph)
source("./R Script/Util/plotNetwork.R")
## set west-southern corner as origion (0,0)
## set west and north boundry
w_bound <- 113.756905
s_bound <- 22.446048
## set interval distance
lon_step <- (114.627914 - 113.756905) / 10;
lat_step <- (22.849712 - 22.446048) / 6;
## create a map graph using matrix with 10 columns and 6 rows
map_graph <- matrix( c(1:60), nrow = 6, ncol = 10, byrow= TRUE)
## create a directed graph using matrix with 60 columns and 60 rows
traj_graph <- matrix(0, nrow = 60, ncol = 60)
trip.data <- read.csv(file="./data/taxiTraj-trip-2009-09-11-hour-0-1.csv")
for(i in 1:(nrow(trip.data))){
## calculate start node
s_x <- trunc((trip.data$or_lon[i] - w_bound) / lon_step, digits = 0) + 1
s_y <- 6 - trunc((trip.data$or_lat[i] - s_bound) / lat_step, digits = 0)
s_node <- map_graph[s_y, s_x]
## calculate end node
e_x <- round((trip.data$dest_lon[i] - w_bound) / lon_step, digits = 0)
e_y <- 6 - round((trip.data$dest_lat[i] - s_bound) / lat_step, digits = 0)
e_node <- map_graph[e_y, e_x]
traj_graph[s_node, e_node] <- traj_graph[s_node, e_node] + 1
}
traj_graph
sum(traj_graph[35, ])
sum(traj_graph[35, ]) + sum(traj_graph[, 35])
sum(traj_graph[35, ]) + sum(traj_graph[, 35]) > sum(traj_graph[34, ]) + sum(traj_graph[, 34])
##setwd("C:/Users/Qifan/Documents/GitHub/taxi-fare-estimation/")
sum(traj_graph[34, ]) + sum(traj_graph[, 34])
sum(traj_graph[44, ]) + sum(traj_graph[, 44])
sum(traj_graph[42, ]) + sum(traj_graph[, 42])
sum(traj_graph[43, ]) + sum(traj_graph[, 43])
trip.data <- read.csv(file="./data/taxiTraj-trip-2009-09-11-hour-1-2.csv")
for(i in 1:(nrow(trip.data))){
## calculate start node
s_x <- trunc((trip.data$or_lon[i] - w_bound) / lon_step, digits = 0) + 1
s_y <- 6 - trunc((trip.data$or_lat[i] - s_bound) / lat_step, digits = 0)
s_node <- map_graph[s_y, s_x]
## calculate end node
e_x <- round((trip.data$dest_lon[i] - w_bound) / lon_step, digits = 0)
e_y <- 6 - round((trip.data$dest_lat[i] - s_bound) / lat_step, digits = 0)
e_node <- map_graph[e_y, e_x]
traj_graph[s_node, e_node] <- traj_graph[s_node, e_node] + 1
}
sum(traj_graph[35, ]) + sum(traj_graph[, 35])
sum(traj_graph[34, ]) + sum(traj_graph[, 34])
sum(traj_graph[44, ]) + sum(traj_graph[, 44])
sum(traj_graph[43, ]) + sum(traj_graph[, 43])
sum(traj_graph[42, ]) + sum(traj_graph[, 42])
trip.data <- read.csv(file="./data/taxiTraj-trip-2009-09-11-hour-2-3.csv")
sum(traj_graph[35, ]) + sum(traj_graph[, 35])
sum(traj_graph[34, ]) + sum(traj_graph[, 34])
sum(traj_graph[44, ]) + sum(traj_graph[, 44])
sum(traj_graph[43, ]) + sum(traj_graph[, 43])
sum(traj_graph[42, ]) + sum(traj_graph[, 42])
for(i in 1:(nrow(trip.data))){
## calculate start node
s_x <- trunc((trip.data$or_lon[i] - w_bound) / lon_step, digits = 0) + 1
s_y <- 6 - trunc((trip.data$or_lat[i] - s_bound) / lat_step, digits = 0)
s_node <- map_graph[s_y, s_x]
## calculate end node
e_x <- round((trip.data$dest_lon[i] - w_bound) / lon_step, digits = 0)
e_y <- 6 - round((trip.data$dest_lat[i] - s_bound) / lat_step, digits = 0)
e_node <- map_graph[e_y, e_x]
traj_graph[s_node, e_node] <- traj_graph[s_node, e_node] + 1
}
sum(traj_graph[35, ]) + sum(traj_graph[, 35])
sum(traj_graph[34, ]) + sum(traj_graph[, 34])
sum(traj_graph[44, ]) + sum(traj_graph[, 44])
sum(traj_graph[43, ]) + sum(traj_graph[, 43])
sum(traj_graph[42, ]) + sum(traj_graph[, 42])
trip.data <- read.csv(file="./data/taxiTraj-trip-2009-09-11-hour-2-3.csv")
for(i in 1:(nrow(trip.data))){
## calculate start node
s_x <- trunc((trip.data$or_lon[i] - w_bound) / lon_step, digits = 0) + 1
s_y <- 6 - trunc((trip.data$or_lat[i] - s_bound) / lat_step, digits = 0)
s_node <- map_graph[s_y, s_x]
## calculate end node
e_x <- round((trip.data$dest_lon[i] - w_bound) / lon_step, digits = 0)
e_y <- 6 - round((trip.data$dest_lat[i] - s_bound) / lat_step, digits = 0)
e_node <- map_graph[e_y, e_x]
traj_graph[s_node, e_node] <- traj_graph[s_node, e_node] + 1
}
sum(traj_graph[35, ]) + sum(traj_graph[, 35])
sum(traj_graph[34, ]) + sum(traj_graph[, 34])
sum(traj_graph[44, ]) + sum(traj_graph[, 44])
sum(traj_graph[43, ]) + sum(traj_graph[, 43])
sum(traj_graph[42, ]) + sum(traj_graph[, 42])
library(igraph)
source("./R Script/Util/plotNetwork.R")
## set west-southern corner as origion (0,0)
## set west and north boundry
w_bound <- 113.756905
s_bound <- 22.446048
## set interval distance
lon_step <- (114.627914 - 113.756905) / 10;
lat_step <- (22.849712 - 22.446048) / 6;
## create a map graph using matrix with 10 columns and 6 rows
map_graph <- matrix( c(1:60), nrow = 6, ncol = 10, byrow= TRUE)
## create a directed graph using matrix with 60 columns and 60 rows
traj_graph <- matrix(0, nrow = 60, ncol = 60)
trip.data <- read.csv(file="./data/taxiTraj-trip-2009-09-11-hour-2-3.csv")
for(i in 1:(nrow(trip.data))){
## calculate start node
s_x <- trunc((trip.data$or_lon[i] - w_bound) / lon_step, digits = 0) + 1
s_y <- 6 - trunc((trip.data$or_lat[i] - s_bound) / lat_step, digits = 0)
s_node <- map_graph[s_y, s_x]
## calculate end node
e_x <- round((trip.data$dest_lon[i] - w_bound) / lon_step, digits = 0)
e_y <- 6 - round((trip.data$dest_lat[i] - s_bound) / lat_step, digits = 0)
e_node <- map_graph[e_y, e_x]
traj_graph[s_node, e_node] <- traj_graph[s_node, e_node] + 1
}
sum(traj_graph[35, ]) + sum(traj_graph[, 35])
sum(traj_graph[34, ]) + sum(traj_graph[, 34])
sum(traj_graph[44, ]) + sum(traj_graph[, 44])
sum(traj_graph[43, ]) + sum(traj_graph[, 43])
sum(traj_graph[42, ]) + sum(traj_graph[, 42])
library(igraph)
source("./R Script/Util/plotNetwork.R")
## set west-southern corner as origion (0,0)
## set west and north boundry
w_bound <- 113.756905
s_bound <- 22.446048
## set interval distance
lon_step <- (114.627914 - 113.756905) / 10;
lat_step <- (22.849712 - 22.446048) / 6;
## create a map graph using matrix with 10 columns and 6 rows
map_graph <- matrix( c(1:60), nrow = 6, ncol = 10, byrow= TRUE)
## create a directed graph using matrix with 60 columns and 60 rows
traj_graph <- matrix(0, nrow = 60, ncol = 60)
trip.data <- read.csv(file="./data/taxiTraj-trip-2009-09-11-hour-1-2.csv")
for(i in 1:(nrow(trip.data))){
## calculate start node
s_x <- trunc((trip.data$or_lon[i] - w_bound) / lon_step, digits = 0) + 1
s_y <- 6 - trunc((trip.data$or_lat[i] - s_bound) / lat_step, digits = 0)
s_node <- map_graph[s_y, s_x]
## calculate end node
e_x <- round((trip.data$dest_lon[i] - w_bound) / lon_step, digits = 0)
e_y <- 6 - round((trip.data$dest_lat[i] - s_bound) / lat_step, digits = 0)
e_node <- map_graph[e_y, e_x]
traj_graph[s_node, e_node] <- traj_graph[s_node, e_node] + 1
}
sum(traj_graph[35, ]) + sum(traj_graph[, 35])
sum(traj_graph[34, ]) + sum(traj_graph[, 34])
sum(traj_graph[44, ]) + sum(traj_graph[, 44])
sum(traj_graph[43, ]) + sum(traj_graph[, 43])
sum(traj_graph[42, ]) + sum(traj_graph[, 42])
library(igraph)
source("./R Script/Util/plotNetwork.R")
## set west-southern corner as origion (0,0)
## set west and north boundry
w_bound <- 113.756905
s_bound <- 22.446048
## set interval distance
lon_step <- (114.627914 - 113.756905) / 10;
lat_step <- (22.849712 - 22.446048) / 6;
## create a map graph using matrix with 10 columns and 6 rows
map_graph <- matrix( c(1:60), nrow = 6, ncol = 10, byrow= TRUE)
## create a directed graph using matrix with 60 columns and 60 rows
traj_graph <- matrix(0, nrow = 60, ncol = 60)
trip.data <- read.csv(file="./data/taxiTraj-trip-2009-09-11-hour-0-1.csv")
for(i in 1:(nrow(trip.data))){
## calculate start node
s_x <- trunc((trip.data$or_lon[i] - w_bound) / lon_step, digits = 0) + 1
s_y <- 6 - trunc((trip.data$or_lat[i] - s_bound) / lat_step, digits = 0)
s_node <- map_graph[s_y, s_x]
## calculate end node
e_x <- round((trip.data$dest_lon[i] - w_bound) / lon_step, digits = 0)
e_y <- 6 - round((trip.data$dest_lat[i] - s_bound) / lat_step, digits = 0)
e_node <- map_graph[e_y, e_x]
traj_graph[s_node, e_node] <- traj_graph[s_node, e_node] + 1
}
sum(traj_graph[35, ]) + sum(traj_graph[, 35])
sum(traj_graph[34, ]) + sum(traj_graph[, 34])
sum(traj_graph[44, ]) + sum(traj_graph[, 44])
sum(traj_graph[43, ]) + sum(traj_graph[, 43])
sum(traj_graph[42, ]) + sum(traj_graph[, 42])
library(igraph)
source("./R Script/Util/plotNetwork.R")
## set west-southern corner as origion (0,0)
## set west and north boundry
w_bound <- 113.756905
s_bound <- 22.446048
## set interval distance
lon_step <- (114.627914 - 113.756905) / 10;
lat_step <- (22.849712 - 22.446048) / 6;
## create a map graph using matrix with 10 columns and 6 rows
map_graph <- matrix( c(1:60), nrow = 6, ncol = 10, byrow= TRUE)
## create a directed graph using matrix with 60 columns and 60 rows
traj_graph <- matrix(0, nrow = 60, ncol = 60)
trip.data <- read.csv(file="./data/taxiTraj-trip-2009-09-11-hour-0-1.csv")
for(i in 1:(nrow(trip.data))){
## calculate start node
s_x <- trunc((trip.data$or_lon[i] - w_bound) / lon_step, digits = 0) + 1
s_y <- 6 - trunc((trip.data$or_lat[i] - s_bound) / lat_step, digits = 0)
s_node <- map_graph[s_y, s_x]
## calculate end node
e_x <- round((trip.data$dest_lon[i] - w_bound) / lon_step, digits = 0)
e_y <- 6 - round((trip.data$dest_lat[i] - s_bound) / lat_step, digits = 0)
e_node <- map_graph[e_y, e_x]
traj_graph[s_node, e_node] <- traj_graph[s_node, e_node] + 1
}
sum(traj_graph[35, ]) + sum(traj_graph[, 35])
sum(traj_graph[34, ]) + sum(traj_graph[, 34])
sum(traj_graph[44, ]) + sum(traj_graph[, 44])
sum(traj_graph[43, ]) + sum(traj_graph[, 43])
sum(traj_graph[42, ]) + sum(traj_graph[, 42])
library(igraph)
source("./R Script/Util/plotNetwork.R")
## set west-southern corner as origion (0,0)
## set west and north boundry
w_bound <- 113.756905
s_bound <- 22.446048
## set interval distance
lon_step <- (114.627914 - 113.756905) / 10;
lat_step <- (22.849712 - 22.446048) / 6;
## create a map graph using matrix with 10 columns and 6 rows
map_graph <- matrix( c(1:60), nrow = 6, ncol = 10, byrow= TRUE)
## create a directed graph using matrix with 60 columns and 60 rows
traj_graph <- matrix(0, nrow = 60, ncol = 60)
trip.data <- read.csv(file="./data/taxiTraj-trip-2009-09-11-hour-0-1.csv")
for(i in 1:(nrow(trip.data))){
## calculate start node
s_x <- trunc((trip.data$or_lon[i] - w_bound) / lon_step, digits = 0) + 1
s_y <- 6 - trunc((trip.data$or_lat[i] - s_bound) / lat_step, digits = 0)
s_node <- map_graph[s_y, s_x]
## calculate end node
e_x <- round((trip.data$dest_lon[i] - w_bound) / lon_step, digits = 0)
e_y <- 6 - round((trip.data$dest_lat[i] - s_bound) / lat_step, digits = 0)
e_node <- map_graph[e_y, e_x]
traj_graph[s_node, e_node] <- traj_graph[s_node, e_node] + 1
}
g <- graph.adjacency(traj_graph, weighted=TRUE, mode = "directed")
nodeId <- vector()
for(i in 1: length(V(g))){
nodeId[i] <- i;
}
V(g)$label <- nodeId
## Exclude nodes which do not have any traffic
bad.nodes <- V(g)[degree(g) == 0] # mark unconnected nodes as bad nodes
g <- delete.vertices(g, bad.nodes)
V(g)$degree <- degree(g)
plotNetwork(g, "Test", "./Image/Taxi_SNA_hour_0_1_.pdf", width=15, height=15)
V(g)$degree
