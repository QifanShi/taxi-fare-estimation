library(maptools)
library(rgdal)
library(rgeos)
# library(rmongodb)
## getwd()
## setwd("/Users/shiqifanshiqifan/Documents/CMU/S15/MIB/taxi-fare-estimation/")
## Load all taxi GPS traces on Sept. 11, 2009 when occupied
taxi.data <- read.csv(file="./data/filtered-taxiTraj-2009-09-11.csv", header=TRUE)
## select only data bwtween 0 - 1
taxi.data <- taxi.data[taxi.data$hour == 1,]
duration <- vector()
trip_indicator <- vector()
threshold <- 5*60 # seconds (5 minutes)
## Create a progress bar
progress.bar <- create_progress_bar("text")
progress.bar$init(nrow(taxi.data)-1)
for(i in 1:(nrow(taxi.data)-1)) {
this_taxi_no <- taxi.data$taxi_no[i]
next_taxi_no <- taxi.data$taxi_no[i+1]
if(this_taxi_no == next_taxi_no) {
this_timestamp <- toString(taxi.data$time[i])
this_timestamp <- strsplit(this_timestamp, ":")[[1]]
this_second <- as.numeric(this_timestamp[1])*3600 + as.numeric(this_timestamp[2])*60 + as.numeric(this_timestamp[3])
next_timestamp <- toString(taxi.data$time[i+1])
next_timestamp <- strsplit(next_timestamp, ":")[[1]]
next_second <- as.numeric(next_timestamp[1])*3600 + as.numeric(next_timestamp[2])*60 + as.numeric(next_timestamp[3])
duration[i] <- next_second - this_second
if(i == 1) {
trip_indicator[i] <- "start"
} else {
if(trip_indicator[i-1] == "end" || trip_indicator[i-1] == "error") {
trip_indicator[i] <- "start"
} else {
if(duration[i] >= threshold) {
trip_indicator[i] <- "end"
} else {
trip_indicator[i] <- "going"
}
}
}
} else {
duration[i] <- NA
if(trip_indicator[i-1] == "end") {
trip_indicator[i] <- "error"
} else {
trip_indicator[i] <- "end"
}
}
progress.bar$step()
}
duration[nrow(taxi.data)] <- NA
trip_indicator[nrow(taxi.data)] <- "going"
taxi.data$duration <- duration
taxi.data$indicator <- trip_indicator
progress.bar <- create_progress_bar("text")
progress.bar$init(nrow(taxi.data))
or.data <- data.frame() # data frame for the origins
dest.data <- data.frame() # data frame for the destinations
for(i in 1:nrow(taxi.data)) {
indicator <- taxi.data$indicator[i]
if(indicator == "start") {
or_lon <- taxi.data$lon[i]
or_lat <- taxi.data$lat[i]
or_data <- data.frame(or_lon = or_lon, or_lat = or_lat)
or.data <- rbind(or.data, or_data)
} else if(indicator == "end") {
dest_lon <- taxi.data$lon[i]
dest_lat <- taxi.data$lat[i]
dest_data <- data.frame(dest_lon = dest_lon, dest_lat = dest_lat)
dest.data <- rbind(dest.data, dest_data)
} else {
## Do nothing
}
progress.bar$step()
}
od.data <- cbind(or.data, dest.data)
duration[nrow(taxi.data)] <- NA
trip_indicator[nrow(taxi.data)] <- "end"
taxi.data$duration <- duration
taxi.data$indicator <- trip_indicator
## Create a progress bar
progress.bar <- create_progress_bar("text")
progress.bar$init(nrow(taxi.data))
or.data <- data.frame() # data frame for the origins
dest.data <- data.frame() # data frame for the destinations
for(i in 1:nrow(taxi.data)) {
indicator <- taxi.data$indicator[i]
if(indicator == "start") {
or_lon <- taxi.data$lon[i]
or_lat <- taxi.data$lat[i]
or_data <- data.frame(or_lon = or_lon, or_lat = or_lat)
or.data <- rbind(or.data, or_data)
} else if(indicator == "end") {
dest_lon <- taxi.data$lon[i]
dest_lat <- taxi.data$lat[i]
dest_data <- data.frame(dest_lon = dest_lon, dest_lat = dest_lat)
dest.data <- rbind(dest.data, dest_data)
} else {
## Do nothing
}
progress.bar$step()
}
## Combine the OD pairs
od.data <- cbind(or.data, dest.data)
## save the result set
write.csv(od.data, file = "./data/taxiTraj-trip-2009-09-11-hour-1-2.csv")
library(igraph)
source("./R Script/Util/plotNetwork.R")
## set west-southern corner as origion (0,0)
## set west and north boundry
w_bound <- 113.756905
s_bound <- 22.446048
## set interval distance
lon_step <- (114.627914 - 113.756905) / 10;
lat_step <- (22.849712 - 22.446048) / 6;
## create a map graph using matrix with 10 columns and 6 rows
map_graph <- matrix( c(1:60), nrow = 6, ncol = 10, byrow= TRUE)
## create a directed graph using matrix with 60 columns and 60 rows
traj_graph <- matrix(0, nrow = 60, ncol = 60)
## for windows
##setwd("C:/Users/Qifan/Documents/GitHub/taxi-fare-estimation/")
##trip.data <- read.csv(file="./data/taxiTraj-trip-2009-09-11.csv")
trip.data <- read.csv(file="./data/taxiTraj-trip-2009-09-11-hour-1-2.csv")
for(i in 1:(nrow(trip.data))){
## calculate start node
s_x <- round((trip.data$or_lon[i] - w_bound) / lon_step, digits = 0) + 1
s_y <- 6 - round((trip.data$or_lat[i] - s_bound) / lat_step, digits = 0)
s_node <- map_graph[s_y, s_x]
## calculate end node
e_x <- round((trip.data$dest_lon[i] - w_bound) / lon_step, digits = 0)
e_y <- 6 - round((trip.data$dest_lat[i] - s_bound) / lat_step, digits = 0)
e_node <- map_graph[e_y, e_x]
traj_graph[s_node, e_node] <- traj_graph[s_node, e_node] + 1
}
## build a social network graph
mode(traj_graph) <- "numeric"
g <- graph.adjacency(traj_graph, weighted=TRUE, mode = "directed")
## give label to each nodes, from 1 to 60
nodeId <- vector()
for(i in 1: length(V(g))){
nodeId[i] <- i;
}
V(g)$label <- nodeId
## Exclude nodes which do not have any traffic
bad.nodes <- V(g)[degree(g) == 0] # mark unconnected nodes as bad nodes
g <- delete.vertices(g, bad.nodes)
V(g)$degree <- degree(g)
plotNetwork(g, "Test", "./Image/Taxi_SNA_hour_1_2.pdf", width=15, height=15)
g <- simplify(g)
plotNetwork(g, "Test", "./Image/Taxi_SNA_Simplify_hour_1_2.pdf", width=15, height=15)
rm(list = ls())
library(plyr)
library(ggplot2)
library(maptools)
library(rgdal)
library(rgeos)
# library(rmongodb)
## getwd()
## setwd("/Users/shiqifanshiqifan/Documents/CMU/S15/MIB/taxi-fare-estimation/")
## Load all taxi GPS traces on Sept. 11, 2009 when occupied
taxi.data <- read.csv(file="./data/filtered-taxiTraj-2009-09-11.csv", header=TRUE)
## select only data bwtween 0 - 1
taxi.data <- taxi.data[taxi.data$hour == 2,]
## Compute the duration between each timestamp
duration <- vector()
trip_indicator <- vector()
threshold <- 5*60 # seconds (5 minutes)
## Create a progress bar
progress.bar <- create_progress_bar("text")
progress.bar$init(nrow(taxi.data)-1)
for(i in 1:(nrow(taxi.data)-1)) {
this_taxi_no <- taxi.data$taxi_no[i]
next_taxi_no <- taxi.data$taxi_no[i+1]
if(this_taxi_no == next_taxi_no) {
this_timestamp <- toString(taxi.data$time[i])
this_timestamp <- strsplit(this_timestamp, ":")[[1]]
this_second <- as.numeric(this_timestamp[1])*3600 + as.numeric(this_timestamp[2])*60 + as.numeric(this_timestamp[3])
next_timestamp <- toString(taxi.data$time[i+1])
next_timestamp <- strsplit(next_timestamp, ":")[[1]]
next_second <- as.numeric(next_timestamp[1])*3600 + as.numeric(next_timestamp[2])*60 + as.numeric(next_timestamp[3])
duration[i] <- next_second - this_second
if(i == 1) {
trip_indicator[i] <- "start"
} else {
if(trip_indicator[i-1] == "end" || trip_indicator[i-1] == "error") {
trip_indicator[i] <- "start"
} else {
if(duration[i] >= threshold) {
trip_indicator[i] <- "end"
} else {
trip_indicator[i] <- "going"
}
}
}
} else {
duration[i] <- NA
if(trip_indicator[i-1] == "end") {
trip_indicator[i] <- "error"
} else {
trip_indicator[i] <- "end"
}
}
progress.bar$step()
}
## the second last row accidentally is "end", if the last row is "end", there will be one
## more end than start
duration[nrow(taxi.data)] <- NA
trip_indicator[nrow(taxi.data)] <- "end"
taxi.data$duration <- duration
taxi.data$indicator <- trip_indicator
## Create a progress bar
progress.bar <- create_progress_bar("text")
progress.bar$init(nrow(taxi.data))
or.data <- data.frame() # data frame for the origins
dest.data <- data.frame() # data frame for the destinations
for(i in 1:nrow(taxi.data)) {
indicator <- taxi.data$indicator[i]
if(indicator == "start") {
or_lon <- taxi.data$lon[i]
or_lat <- taxi.data$lat[i]
or_data <- data.frame(or_lon = or_lon, or_lat = or_lat)
or.data <- rbind(or.data, or_data)
} else if(indicator == "end") {
dest_lon <- taxi.data$lon[i]
dest_lat <- taxi.data$lat[i]
dest_data <- data.frame(dest_lon = dest_lon, dest_lat = dest_lat)
dest.data <- rbind(dest.data, dest_data)
} else {
## Do nothing
}
progress.bar$step()
}
## Combine the OD pairs
od.data <- cbind(or.data, dest.data)
## save the result set
write.csv(od.data, file = "./data/taxiTraj-trip-2009-09-11-hour-2-3.csv")
duration[nrow(taxi.data)] <- NA
trip_indicator[nrow(taxi.data)] <- "going"
taxi.data$duration <- duration
taxi.data$indicator <- trip_indicator
## Create a progress bar
progress.bar <- create_progress_bar("text")
progress.bar$init(nrow(taxi.data))
or.data <- data.frame() # data frame for the origins
dest.data <- data.frame() # data frame for the destinations
for(i in 1:nrow(taxi.data)) {
indicator <- taxi.data$indicator[i]
if(indicator == "start") {
or_lon <- taxi.data$lon[i]
or_lat <- taxi.data$lat[i]
or_data <- data.frame(or_lon = or_lon, or_lat = or_lat)
or.data <- rbind(or.data, or_data)
} else if(indicator == "end") {
dest_lon <- taxi.data$lon[i]
dest_lat <- taxi.data$lat[i]
dest_data <- data.frame(dest_lon = dest_lon, dest_lat = dest_lat)
dest.data <- rbind(dest.data, dest_data)
} else {
## Do nothing
}
progress.bar$step()
}
## Combine the OD pairs
od.data <- cbind(or.data, dest.data)
## save the result set
write.csv(od.data, file = "./data/taxiTraj-trip-2009-09-11-hour-2-3.csv")
library(igraph)
source("./R Script/Util/plotNetwork.R")
## set west-southern corner as origion (0,0)
## set west and north boundry
w_bound <- 113.756905
s_bound <- 22.446048
## set interval distance
lon_step <- (114.627914 - 113.756905) / 10;
lat_step <- (22.849712 - 22.446048) / 6;
## create a map graph using matrix with 10 columns and 6 rows
map_graph <- matrix( c(1:60), nrow = 6, ncol = 10, byrow= TRUE)
## create a directed graph using matrix with 60 columns and 60 rows
traj_graph <- matrix(0, nrow = 60, ncol = 60)
## for windows
##setwd("C:/Users/Qifan/Documents/GitHub/taxi-fare-estimation/")
##trip.data <- read.csv(file="./data/taxiTraj-trip-2009-09-11.csv")
trip.data <- read.csv(file="./data/taxiTraj-trip-2009-09-11-hour-2-3.csv")
##head(trip.data)
for(i in 1:(nrow(trip.data))){
## calculate start node
s_x <- round((trip.data$or_lon[i] - w_bound) / lon_step, digits = 0) + 1
s_y <- 6 - round((trip.data$or_lat[i] - s_bound) / lat_step, digits = 0)
s_node <- map_graph[s_y, s_x]
## calculate end node
e_x <- round((trip.data$dest_lon[i] - w_bound) / lon_step, digits = 0)
e_y <- 6 - round((trip.data$dest_lat[i] - s_bound) / lat_step, digits = 0)
e_node <- map_graph[e_y, e_x]
traj_graph[s_node, e_node] <- traj_graph[s_node, e_node] + 1
}
## build a social network graph
mode(traj_graph) <- "numeric"
g <- graph.adjacency(traj_graph, weighted=TRUE, mode = "directed")
## give label to each nodes, from 1 to 60
nodeId <- vector()
for(i in 1: length(V(g))){
nodeId[i] <- i;
}
V(g)$label <- nodeId
## Exclude nodes which do not have any traffic
bad.nodes <- V(g)[degree(g) == 0] # mark unconnected nodes as bad nodes
g <- delete.vertices(g, bad.nodes)
V(g)$degree <- degree(g)
plotNetwork(g, "Test", "./Image/Taxi_SNA_hour_2_3.pdf", width=15, height=15)
g <- simplify(g)
plotNetwork(g, "Test", "./Image/Taxi_SNA_Simplify_hour_2_3.pdf", width=15, height=15)
trip.data <- read.csv(file="./data/taxiTraj-trip-2009-09-11.csv")
for(i in 1:(nrow(trip.data))){
## calculate start node
s_x <- round((trip.data$or_lon[i] - w_bound) / lon_step, digits = 0) + 1
s_y <- 6 - round((trip.data$or_lat[i] - s_bound) / lat_step, digits = 0)
s_node <- map_graph[s_y, s_x]
## calculate end node
e_x <- round((trip.data$dest_lon[i] - w_bound) / lon_step, digits = 0)
e_y <- 6 - round((trip.data$dest_lat[i] - s_bound) / lat_step, digits = 0)
e_node <- map_graph[e_y, e_x]
traj_graph[s_node, e_node] <- traj_graph[s_node, e_node] + 1
}
## build a social network graph
mode(traj_graph) <- "numeric"
g <- graph.adjacency(traj_graph, weighted=TRUE, mode = "directed")
## give label to each nodes, from 1 to 60
nodeId <- vector()
for(i in 1: length(V(g))){
nodeId[i] <- i;
}
V(g)$label <- nodeId
## Exclude nodes which do not have any traffic
bad.nodes <- V(g)[degree(g) == 0] # mark unconnected nodes as bad nodes
g <- delete.vertices(g, bad.nodes)
V(g)$degree <- degree(g)
plotNetwork(g, "Test", "./Image/Taxi_SNA.pdf", width=15, height=15)
g <- simplify(g)
plotNetwork(g, "Test", "./Image/Taxi_SNA_Simplify.pdf", width=15, height=15)
round(2.5, digit = 0)
round(2.7, digit = 0)
(int) 2.7
(int)2.7
((int)2.7)
((int)$2.7)
trunc(2.7)
trunc(2.1)
trunc(1.9)
library(igraph)
source("./R Script/Util/plotNetwork.R")
## set west-southern corner as origion (0,0)
## set west and north boundry
w_bound <- 113.756905
s_bound <- 22.446048
## set interval distance
lon_step <- (114.627914 - 113.756905) / 10;
lat_step <- (22.849712 - 22.446048) / 6;
## create a map graph using matrix with 10 columns and 6 rows
map_graph <- matrix( c(1:60), nrow = 6, ncol = 10, byrow= TRUE)
## create a directed graph using matrix with 60 columns and 60 rows
traj_graph <- matrix(0, nrow = 60, ncol = 60)
## for windows
##setwd("C:/Users/Qifan/Documents/GitHub/taxi-fare-estimation/")
trip.data <- read.csv(file="./data/taxiTraj-trip-2009-09-11.csv")
##trip.data <- read.csv(file="./data/taxiTraj-trip-2009-09-11-hour-2-3.csv")
##head(trip.data)
for(i in 1:(nrow(trip.data))){
## calculate start node
s_x <- trunc((trip.data$or_lon[i] - w_bound) / lon_step, digits = 0) + 1
s_y <- 6 - trunc((trip.data$or_lat[i] - s_bound) / lat_step, digits = 0)
s_node <- map_graph[s_y, s_x]
## calculate end node
e_x <- round((trip.data$dest_lon[i] - w_bound) / lon_step, digits = 0)
e_y <- 6 - round((trip.data$dest_lat[i] - s_bound) / lat_step, digits = 0)
e_node <- map_graph[e_y, e_x]
traj_graph[s_node, e_node] <- traj_graph[s_node, e_node] + 1
}
## build a social network graph
mode(traj_graph) <- "numeric"
g <- graph.adjacency(traj_graph, weighted=TRUE, mode = "directed")
## give label to each nodes, from 1 to 60
nodeId <- vector()
for(i in 1: length(V(g))){
nodeId[i] <- i;
}
V(g)$label <- nodeId
## Exclude nodes which do not have any traffic
bad.nodes <- V(g)[degree(g) == 0] # mark unconnected nodes as bad nodes
g <- delete.vertices(g, bad.nodes)
V(g)$degree <- degree(g)
plotNetwork(g, "Test", "./Image/Taxi_SNA.pdf", width=15, height=15)
g <- simplify(g)
plotNetwork(g, "Test", "./Image/Taxi_SNA_Simplify.pdf", width=15, height=15)
library(igraph)
source("./R Script/Util/plotNetwork.R")
## set west-southern corner as origion (0,0)
## set west and north boundry
w_bound <- 113.756905
s_bound <- 22.446048
## set interval distance
lon_step <- (114.627914 - 113.756905) / 10;
lat_step <- (22.849712 - 22.446048) / 6;
## create a map graph using matrix with 10 columns and 6 rows
map_graph <- matrix( c(1:60), nrow = 6, ncol = 10, byrow= TRUE)
## create a directed graph using matrix with 60 columns and 60 rows
traj_graph <- matrix(0, nrow = 60, ncol = 60)
trip.data <- read.csv(file="./data/taxiTraj-trip-2009-09-11-hour-2-3.csv")
for(i in 1:(nrow(trip.data))){
## calculate start node
s_x <- trunc((trip.data$or_lon[i] - w_bound) / lon_step, digits = 0) + 1
s_y <- 6 - trunc((trip.data$or_lat[i] - s_bound) / lat_step, digits = 0)
s_node <- map_graph[s_y, s_x]
## calculate end node
e_x <- round((trip.data$dest_lon[i] - w_bound) / lon_step, digits = 0)
e_y <- 6 - round((trip.data$dest_lat[i] - s_bound) / lat_step, digits = 0)
e_node <- map_graph[e_y, e_x]
traj_graph[s_node, e_node] <- traj_graph[s_node, e_node] + 1
}
## build a social network graph
mode(traj_graph) <- "numeric"
g <- graph.adjacency(traj_graph, weighted=TRUE, mode = "directed")
## give label to each nodes, from 1 to 60
nodeId <- vector()
for(i in 1: length(V(g))){
nodeId[i] <- i;
}
V(g)$label <- nodeId
## Exclude nodes which do not have any traffic
bad.nodes <- V(g)[degree(g) == 0] # mark unconnected nodes as bad nodes
g <- delete.vertices(g, bad.nodes)
V(g)$degree <- degree(g)
plotNetwork(g, "Test", "./Image/Taxi_SNA_hour_2_3.pdf", width=15, height=15)
g <- simplify(g)
plotNetwork(g, "Test", "./Image/Taxi_SNA_Simplify_hour_2_3.pdf", width=15, height=15)
trip.data <- read.csv(file="./data/taxiTraj-trip-2009-09-11-hour-1-2.csv")
library(igraph)
source("./R Script/Util/plotNetwork.R")
## set west-southern corner as origion (0,0)
## set west and north boundry
w_bound <- 113.756905
s_bound <- 22.446048
## set interval distance
lon_step <- (114.627914 - 113.756905) / 10;
lat_step <- (22.849712 - 22.446048) / 6;
## create a map graph using matrix with 10 columns and 6 rows
map_graph <- matrix( c(1:60), nrow = 6, ncol = 10, byrow= TRUE)
## create a directed graph using matrix with 60 columns and 60 rows
traj_graph <- matrix(0, nrow = 60, ncol = 60)
for(i in 1:(nrow(trip.data))){
## calculate start node
s_x <- trunc((trip.data$or_lon[i] - w_bound) / lon_step, digits = 0) + 1
s_y <- 6 - trunc((trip.data$or_lat[i] - s_bound) / lat_step, digits = 0)
s_node <- map_graph[s_y, s_x]
## calculate end node
e_x <- round((trip.data$dest_lon[i] - w_bound) / lon_step, digits = 0)
e_y <- 6 - round((trip.data$dest_lat[i] - s_bound) / lat_step, digits = 0)
e_node <- map_graph[e_y, e_x]
traj_graph[s_node, e_node] <- traj_graph[s_node, e_node] + 1
}
## build a social network graph
mode(traj_graph) <- "numeric"
g <- graph.adjacency(traj_graph, weighted=TRUE, mode = "directed")
## give label to each nodes, from 1 to 60
nodeId <- vector()
for(i in 1: length(V(g))){
nodeId[i] <- i;
}
V(g)$label <- nodeId
## Exclude nodes which do not have any traffic
bad.nodes <- V(g)[degree(g) == 0] # mark unconnected nodes as bad nodes
g <- delete.vertices(g, bad.nodes)
V(g)$degree <- degree(g)
plotNetwork(g, "Test", "./Image/Taxi_SNA_hour_1_2.pdf", width=15, height=15)
g <- simplify(g)
plotNetwork(g, "Test", "./Image/Taxi_SNA_Simplify_hour_1_2.pdf", width=15, height=15)
trip.data <- read.csv(file="./data/taxiTraj-trip-2009-09-11-hour-0-1.csv")
w_bound <- 113.756905
s_bound <- 22.446048
## set interval distance
lon_step <- (114.627914 - 113.756905) / 10;
lat_step <- (22.849712 - 22.446048) / 6;
## create a map graph using matrix with 10 columns and 6 rows
map_graph <- matrix( c(1:60), nrow = 6, ncol = 10, byrow= TRUE)
## create a directed graph using matrix with 60 columns and 60 rows
traj_graph <- matrix(0, nrow = 60, ncol = 60)
for(i in 1:(nrow(trip.data))){
## calculate start node
s_x <- trunc((trip.data$or_lon[i] - w_bound) / lon_step, digits = 0) + 1
s_y <- 6 - trunc((trip.data$or_lat[i] - s_bound) / lat_step, digits = 0)
s_node <- map_graph[s_y, s_x]
## calculate end node
e_x <- round((trip.data$dest_lon[i] - w_bound) / lon_step, digits = 0)
e_y <- 6 - round((trip.data$dest_lat[i] - s_bound) / lat_step, digits = 0)
e_node <- map_graph[e_y, e_x]
traj_graph[s_node, e_node] <- traj_graph[s_node, e_node] + 1
}
## build a social network graph
mode(traj_graph) <- "numeric"
g <- graph.adjacency(traj_graph, weighted=TRUE, mode = "directed")
## give label to each nodes, from 1 to 60
nodeId <- vector()
for(i in 1: length(V(g))){
nodeId[i] <- i;
}
V(g)$label <- nodeId
## Exclude nodes which do not have any traffic
bad.nodes <- V(g)[degree(g) == 0] # mark unconnected nodes as bad nodes
g <- delete.vertices(g, bad.nodes)
V(g)$degree <- degree(g)
plotNetwork(g, "Test", "./Image/Taxi_SNA_hour_0_1.pdf", width=15, height=15)
g <- simplify(g)
plotNetwork(g, "Test", "./Image/Taxi_SNA_Simplify_hour_0_1.pdf", width=15, height=15)
